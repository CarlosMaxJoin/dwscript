#summary DWScript Dynamic Arrays

== Dynamic Arrays ==

See also [StaticArrays static arrays].

Dynamic arrays are supported as reference types, they are declared without bounds. Their lower bound is always zero.

In addition to *`Low`*, *`High`*, *`Length`* and *`Count`*, they also support the following pseudo-methods:
 * *`Add`*(item [,...]) / *Push*(item [,...]) : increases Length by one and adds one or more item at the end of the array, can also add arrays (concatenation).
 * *`Clear`*() : empties the array (equivalent to `SetLength`(0))
 * *`Copy`*(startIndex`[`, count`]`) : creates a new dynamic array containing count items from startIndex, if count isn't specified, copies to the end of the array.
 * *`Delete`*(index`[`, count`]`) : deletes the item at the specified index and reduces Length by count (default one).
 * *`IndexOf`*(`[startIndex, ]`item) : returns the index of an item, returns a negative value if not found.
 * *`Insert`*(index, item) : insert an item at the specified index.
 * *`Peek`*() : returns the last item.
 * *`Pop`*() : returns the last item and removes it from the array.
 * *`SetLength`*(newLength) : defines the length of a dynamic array
 * *`Swap`*(index1, index2) : swaps to items of specified indexes.
 * *`Reverse`*() : reverses the order of the items.
  
You can use the *in* and *not in* operators to test the presence of an element in a static array.

Dynamic arrays can be initialized from inline or constant static arrays:
{{{
var dynamicArray : array of String;
...
dynamicArray := ['one', 'two', 'three'];
}}}